---
description: Reglas cr√≠ticas para el Sistema de Control de Gas - Arquitectura y flujo operativo
globs: app/**/*.tsx, components/**/*.tsx, lib/**/*.ts, actions/**/*.ts
alwaysApply: true
---

# Sistema de Control de Gas - Reglas Cr√≠ticas

## üèóÔ∏è **Arquitectura del Sistema**

### **Roles y Acceso Diferenciado**

- **üë®‚Äçüíº JEFE (Admin)**: Acceso completo desde cualquier dispositivo

  - **PC/Desktop:** Dashboard completo con sidebar, tablas detalladas, reportes avanzados
  - **Tablet:** Interfaz adaptada con navegaci√≥n t√°ctil, cards optimizadas
  - **M√≥vil:** Versi√≥n compacta con funciones esenciales, navegaci√≥n por tabs
  - Panel "En Ruta" para monitoreo en tiempo real
  - Gesti√≥n completa de inventario
  - Configuraci√≥n de precios personalizados
  - Registro de llegadas de cami√≥n
  - Todos los reportes y an√°lisis

- **üë®‚Äçüíª VENDEDOR**: Solo acceso m√≥vil optimizado con funciones limitadas
  - **M√≥vil:** Interfaz t√°ctil optimizada, formularios simplificados
  - Registro de ventas √∫nicamente
  - Registro de gastos operativos
  - Visualizaci√≥n solo de sus propias transacciones
  - Sin acceso a inventario general
  - Sin acceso a reportes financieros

### **Inventario Separado - CR√çTICO**

```typescript
// ‚úÖ DO: Manejar inventarios completamente separados
const inventoryFull = {
  type: '33lb' | '40lb' | '100lb', // Solo marca Roscogas
  quantity: number,
  unitCost: decimal,
};

const inventoryEmpty = {
  type: '33lb' | '40lb' | '100lb',
  brand: 'Roscogas' | 'Gasan' | 'Gaspais' | 'Vidagas' | 'Otro',
  color: 'Naranja' | 'Azul' | 'Verde Oscuro' | 'Verde Claro', // Se asigna autom√°ticamente seg√∫n la marca
  quantity: number,
};
```

### **Marcas y Colores de Cilindros - OBLIGATORIO**

```typescript
// ‚úÖ DO: Usar estas marcas y colores exactos
const cylinderBrands = {
  'Roscogas': 'Naranja', // Marca principal, color naranja
  'Gasan': 'Azul', // Marca secundaria, color azul
  'Gaspais': 'Verde Oscuro', // Marca secundaria, color verde oscuro
  'Vidagas': 'Verde Claro', // Marca secundaria, color verde claro
};

// ‚úÖ DO: Solo Roscogas para cilindros llenos
const fullCylinders = {
  brand: 'Roscogas',
  color: 'Naranja',
  types: ['33lb', '40lb', '100lb'],
};

// ‚úÖ DO: Todas las marcas para cilindros vac√≠os (color se asigna autom√°ticamente)
const emptyCylinders = {
  brands: ['Roscogas', 'Gasan', 'Gaspais', 'Vidagas'],
  // Color se asigna autom√°ticamente seg√∫n la marca seleccionada
  brandToColor: {
    'Roscogas': 'Naranja',
    'Gasan': 'Azul',
    'Gaspais': 'Verde Oscuro',
    'Vidagas': 'Verde Claro',
  },
};
```

### **Tipos de Transacciones - OBLIGATORIO**

```typescript
// ‚úÖ DO: Implementar estos 4 tipos exactos
type SaleType =
  | 'intercambio' // -1 lleno, +1 vac√≠o (80% de ventas) - FLUJO ESPECIAL
  | 'completa' // -1 lleno √∫nicamente
  | 'venta_vacios' // -1 vac√≠o
  | 'compra_vacios'; // +1 vac√≠o

// ‚úÖ DO: Flujo espec√≠fico para intercambio - CR√çTICO
interface ExchangeFlow {
  step1: 'select_customer'; // Seleccionar o crear cliente
  step2: 'select_sale_type'; // Seleccionar tipo de venta INMEDIATAMENTE despu√©s del cliente
  step3: 'register_empty_cylinders'; // Registrar vac√≠os recibidos (marca, tipo, cantidad)
  step4: 'auto_calculate_full_cylinders'; // Calcular autom√°ticamente llenos a entregar
  step5: 'validate_consistency'; // Validar que suma vac√≠os = suma llenos
  step6: 'process_exchange'; // Procesar intercambio y actualizar inventario
}

// ‚úÖ DO: Estructura para vac√≠os recibidos en intercambio
interface EmptyCylinderReceived {
  brand: 'Roscogas' | 'Gasan' | 'Gaspais' | 'Vidagas';
  type: '33lb' | '40lb' | '100lb';
  quantity: number;
  color: string; // Se asigna autom√°ticamente seg√∫n marca
}

// ‚úÖ DO: C√°lculo autom√°tico de llenos a entregar
interface FullCylinderToDeliver {
  type: '33lb' | '40lb' | '100lb';
  quantity: number; // Calculado autom√°ticamente
  brand: 'Roscogas'; // Siempre Roscogas para llenos
  color: 'Naranja'; // Siempre naranja para Roscogas
}
```

## üõ£Ô∏è **Panel "En Ruta" - Funcionalidad Central**

### **Cards de Vendedores - SOLO D√çA ACTUAL**

```typescript
// ‚úÖ DO: Mostrar √∫nicamente datos del d√≠a actual
interface VendorCard {
  vendorName: string;
  assignedRoute: string;
  cylindersAssigned: number; // Por tipo
  cylindersSold: number; // Por tipo
  cylindersRemaining: number; // Por tipo
  totalSales: number; // Del d√≠a
  totalExpenses: number; // Del d√≠a
  dailyMargin: number; // Ventas - Gastos
  progressPercentage: number; // Visual
  lastUpdate: timestamp;
}
```

### **Estados de Cilindros**

```typescript
// ‚úÖ DO: Usar estado STANDBY para asignaciones
type CylinderStatus =
  | 'available' // En inventario general
  | 'standby' // Asignado a vendedor (no afecta inventario)
  | 'sold' // Vendido (actualiza inventario)
  | 'returned'; // Devuelto al final del d√≠a
```

## üí∞ **Gesti√≥n Financiera - Factor Cr√≠tico**

### **Precio de Compra = Rentabilidad**

```typescript
// ‚úÖ DO: El precio de compra determina la ganancia
interface TruckArrival {
  cylindersReceived: number;
  unitCost: decimal; // CR√çTICO: Define rentabilidad
  totalInvoice: decimal;
  freightCost: decimal; // Se paga por separado
}
```

### **C√°lculo de Margen**

```typescript
// ‚úÖ DO: Calcular margen correctamente
const dailyMargin = totalSales - totalExpenses;
const profitPerCylinder = salePrice - purchasePrice;
```

## üì± **Interfaces Diferenciadas por Rol y Dispositivo**

### **üë®‚Äçüíº Interfaz del Jefe - Multi-dispositivo**

```tsx
// ‚úÖ DO: Interfaz responsive para jefe
<div className="min-h-screen bg-background">
  {/* Desktop: Sidebar lateral */}
  <div className="hidden lg:block fixed inset-y-0 left-0 w-64 bg-sidebar border-r">
    <Sidebar />
  </div>

  {/* Tablet: Navegaci√≥n superior */}
  <div className="lg:hidden">
    <TopNavigation />
  </div>

  {/* Contenido principal adaptativo */}
  <main className="lg:ml-64 p-4 lg:p-6">
    {/* Dashboard completo en desktop, compacto en m√≥vil */}
  </main>
</div>
```

### **üë®‚Äçüíª Interfaz del Vendedor - M√≥vil Optimizado**

```tsx
// ‚úÖ DO: Interfaz m√≥vil espec√≠fica para vendedores
<div className="min-h-screen bg-background pb-20">
  {/* Header sticky */}
  <header className="sticky top-0 z-10 bg-card border-b">
    {/* Contenido del header */}
  </header>

  {/* Contenido principal */}
  <main className="p-4">{/* Contenido */}</main>

  {/* Navegaci√≥n inferior fija */}
  <div className="fixed bottom-0 left-0 right-0 bg-card border-t">
    {/* Navegaci√≥n t√°ctil */}
  </div>
</div>
```

### **üéØ Caracter√≠sticas por Dispositivo y Rol**

```typescript
// ‚úÖ DO: Matriz de caracter√≠sticas por dispositivo y rol
const interfaceMatrix = {
  jefe: {
    desktop: {
      layout: 'sidebar + main content';
      features: 'full dashboard, detailed tables, advanced reports';
      navigation: 'sidebar menu';
    };
    tablet: {
      layout: 'top navigation + cards';
      features: 'optimized cards, touch navigation, essential reports';
      navigation: 'top tabs + bottom navigation';
    };
    mobile: {
      layout: 'compact tabs + bottom navigation';
      features: 'essential functions, quick actions, simplified reports';
      navigation: 'bottom tabs + hamburger menu';
    };
  };
  vendedor: {
    mobile: {
      layout: 'full screen mobile optimized';
      features: 'sales forms, expense tracking, personal history';
      navigation: 'bottom tabs + swipe gestures';
    };
  };
};
```

## üì± **Interfaz M√≥vil - Vendedores**

### **Formulario de Ventas - Campos Obligatorios**

```typescript
// ‚úÖ DO: Incluir todos estos campos
interface SaleForm {
  customerName: string; // Obligatorio
  customerPhone?: string; // Opcional
  customerLocation: string; // Obligatorio
  productType: '33lb' | '40lb' | '100lb';
  saleType: SaleType;
  amountCharged: decimal;
  paymentMethod: 'efectivo' | 'transferencia' | 'credito';
  timestamp: Date; // Autom√°tico
}
```

### **Formulario de Gastos**

```typescript
// ‚úÖ DO: Categorizar gastos correctamente
interface ExpenseForm {
  type: 'gasolina' | 'comida' | 'reparaciones' | 'otros';
  amount: decimal;
  description: string;
  timestamp: Date;
}
```

## üîÑ **Flujo Operativo Diario**

### **Inicio del D√≠a (6:00 AM - 8:00 AM)**

1. Jefe asigna cilindros a vendedores
2. Cilindros quedan en estado STANDBY
3. Se crean cards "En Ruta" autom√°ticamente

### **Durante el D√≠a (8:00 AM - 6:00 PM)**

1. Vendedores registran ventas desde m√≥vil
2. Cards "En Ruta" se actualizan instant√°neamente
3. Inventario se actualiza solo con ventas confirmadas

### **Final del D√≠a (6:00 PM - 8:00 PM)**

1. Cilindros no vendidos regresan al inventario
2. Cards "En Ruta" se resetean autom√°ticamente
3. Datos se consolidan para reportes

## üö® **Reglas de Validaci√≥n**

### **‚ùå DON'T: Operaciones que NO afectan inventario**

- Salida para ruta (solo cambia a STANDBY)
- Asignaci√≥n a vendedores (solo crea cards)
- Devoluciones al final del d√≠a (solo cambia estado)

### **‚úÖ DO: Operaciones que S√ç afectan inventario**

- Venta con intercambio: -1 lleno, +1 vac√≠o
- Venta completa: -1 lleno
- Venta de vac√≠os: -1 vac√≠o
- Compra de vac√≠os: +1 vac√≠o
- Llegada de cami√≥n: +llenos recibidos, -vac√≠os entregados

### **üì± Validaciones de Interfaz por Rol**

```typescript
// ‚úÖ DO: Validaciones espec√≠ficas por rol y dispositivo
const interfaceValidations = {
  jefe: {
    desktop: 'full_access_all_features',
    tablet: 'essential_features_touch_optimized',
    mobile: 'core_functions_compact_ui',
  };
  vendedor: {
    mobile: 'sales_expenses_only_own_data',
    desktop: 'access_denied_redirect_mobile',
    tablet: 'access_denied_redirect_mobile',
  };
};

// ‚úÖ DO: Redirecci√≥n autom√°tica por rol
const roleBasedRouting = {
  jefe: 'dashboard_admin',
  vendedor: 'dashboard_vendor_mobile',
};
```

### **üéØ Reglas de Dropdowns y Selecci√≥n - CR√çTICO**

```typescript
// ‚úÖ DO: NUNCA preseleccionar en dropdowns
const dropdownRules = {
  // ‚ùå DON'T: Preseleccionar valores en dropdowns
  brand: '', // Siempre vac√≠o inicialmente
  type: '', // Siempre vac√≠o inicialmente
  paymentMethod: '', // Siempre vac√≠o inicialmente

  // ‚úÖ DO: Solo preseleccionar cantidades ‚â• 1
  quantity: 1, // Cantidad m√≠nima v√°lida

  // ‚úÖ DO: Placeholders obligatorios
  placeholders: {
    brand: 'Selecciona la marca',
    type: 'Selecciona el tipo',
    paymentMethod: 'Selecciona el m√©todo de pago',
  },

  // ‚úÖ DO: Validaci√≥n antes de agregar
  validation: {
    requireSelection: 'brand && type && quantity >= 1',
    disableButton: '!brand || !type',
  },
};

// ‚úÖ DO: Botones deshabilitados hasta selecci√≥n completa
const buttonStates = {
  addEmptyCylinder: 'disabled: !currentBrand || !currentType',
  addFullCylinder: 'disabled: !productType',
  submitSale: 'disabled: !paymentMethod',
};
```

## üìä **Sistema de Metas**

### **Unidad de Medida: Kilogramos**

```typescript
// ‚úÖ DO: Convertir autom√°ticamente
const conversions = {
  '33lb': 15, // kg
  '40lb': 18, // kg
  '100lb': 45, // kg
};
```

### **Per√≠odos de Metas**

- Semanales, mensuales, semestrales, anuales
- Generales del negocio e individuales por vendedor
- Seguimiento en tiempo real con barras de progreso

## üîê **Seguridad y Permisos**

### **Control de Edici√≥n**

- Vendedores solo pueden editar con autorizaci√≥n del jefe
- Sistema de solicitudes y aprobaciones
- Auditor√≠a completa de todas las acciones

### **Comunicaci√≥n Externa**

- WhatsApp para comprobantes y evidencias
- Sin integraci√≥n t√©cnica compleja
- Flujo directo jefe-vendedores

## üéØ **Objetivo Principal del Sistema**

**Maximizar la rentabilidad** controlando precisamente:

1. **Precio de compra** del gas (factor principal de costos)
2. **Precio de venta** al cliente (personalizable por cliente)
3. **Gastos operativos** (controlados por vendedor)

El sistema debe transformar datos operativos en **informaci√≥n accionable** para tomar mejores decisiones comerciales y operativas.

## üéØ **Mejores Pr√°cticas para Interfaces Diferenciadas**

### **üì± Desarrollo Responsive**

```typescript
// ‚úÖ DO: Hook para detectar dispositivo y rol
const useDeviceAndRole = () => {
  const { user } = useAuth();
  const isMobile = useMediaQuery('(max-width: 768px)');
  const isTablet = useMediaQuery('(min-width: 769px) and (max-width: 1024px)');
  const isDesktop = useMediaQuery('(min-width: 1025px)');

  return {
    device: { isMobile, isTablet, isDesktop },
    role: user?.role,
    interface: getInterfaceConfig(user?.role, {
      isMobile,
      isTablet,
      isDesktop,
    }),
  };
};

// ‚úÖ DO: Configuraci√≥n de interfaz por rol y dispositivo
const getInterfaceConfig = (role: string, device: DeviceInfo) => {
  if (role === 'vendedor') {
    return {
      layout: 'mobile_only',
      features: ['sales', 'expenses', 'personal_history'],
      navigation: 'bottom_tabs',
    };
  }

  if (role === 'jefe') {
    if (device.isDesktop) {
      return {
        layout: 'sidebar_main',
        features: ['full_dashboard', 'detailed_tables', 'advanced_reports'],
        navigation: 'sidebar_menu',
      };
    }
    if (device.isTablet) {
      return {
        layout: 'top_nav_cards',
        features: ['optimized_cards', 'essential_reports'],
        navigation: 'top_tabs',
      };
    }
    if (device.isMobile) {
      return {
        layout: 'compact_tabs',
        features: ['essential_functions', 'quick_actions'],
        navigation: 'bottom_tabs',
      };
    }
  }
};
```

### **üîê Validaci√≥n de Acceso por Dispositivo**

```typescript
// ‚úÖ DO: Middleware de validaci√≥n de acceso
const validateDeviceAccess = (role: string, device: DeviceInfo) => {
  if (role === 'vendedor' && !device.isMobile) {
    throw new Error(
      'Vendedores solo pueden acceder desde dispositivos m√≥viles'
    );
  }

  if (role === 'jefe') {
    // Jefe puede acceder desde cualquier dispositivo
    return true;
  }

  return false;
};
```

## üìã **Casos de Uso Cr√≠ticos - Implementaci√≥n**

### **üîÑ Casos de Uso del Sistema (CR√çTICOS)**

#### **CU-S001: Actualizar Inventario Autom√°ticamente**

```typescript
// ‚úÖ DO: Operaciones que S√ç afectan inventario
const inventoryOperations = {
  'intercambio': { full: -1, empty: +1 },
  'completa': { full: -1, empty: 0 },
  'venta_vacios': { full: 0, empty: -1 },
  'compra_vacios': { full: 0, empty: +1 },
  'truck_arrival': { full: '+received', empty: '-delivered' },
};

// ‚ùå DON'T: Operaciones que NO afectan inventario
const nonInventoryOperations = [
  'assignment', // Solo cambia a STANDBY
  'return', // Solo cambia estado
  'standby', // No afecta inventario
];
```

#### **CU-S002: Calcular Rentabilidad Autom√°ticamente**

```typescript
// ‚úÖ DO: C√°lculo preciso de rentabilidad
const calculateProfitability = {
  grossProfit: salePrice - purchasePrice,
  netProfit: grossProfit - operationalExpenses,
  margin: (netProfit / salePrice) * 100,
  dailyMargin: totalSales - totalExpenses,
};
```

#### **CU-S003: Gestionar Estados de Cilindros**

```typescript
// ‚úÖ DO: Estados y transiciones v√°lidas
type CylinderStatus =
  | 'available' // En inventario general
  | 'standby' // Asignado a vendedor (no afecta inventario)
  | 'sold' // Vendido (actualiza inventario)
  | 'returned'; // Devuelto al final del d√≠a

const stateTransitions = {
  'available': ['standby', 'sold'],
  'standby': ['sold', 'returned'],
  'sold': [], // Estado final
  'returned': ['available'], // Al final del d√≠a
};
```

### **üë®‚Äçüíº Casos de Uso del Jefe (ALTA PRIORIDAD)**

#### **CU-J001: Gestionar Inventario**

```typescript
// ‚úÖ DO: Validaciones para ajustes manuales
const validateInventoryAdjustment = {
  quantity: 'number > 0',
  reason: 'string.length > 10',
  timestamp: 'Date.now()',
  authorizedBy: 'jefe_id',
};
```

#### **CU-J002: Asignar Cilindros Diarios**

```typescript
// ‚úÖ DO: Proceso de asignaci√≥n diaria
interface DailyAssignment {
  vendorId: string;
  date: Date;
  assignedCylinders: {
    '33lb': number;
    '40lb': number;
    '100lb': number;
  };
  status: 'assigned' | 'in_progress' | 'completed';
}
```

#### **CU-J003: Monitorear Panel "En Ruta"**

```typescript
// ‚úÖ DO: Estructura de card optimizada
interface VendorCard {
  vendorName: string;
  assignedRoute: string;
  cylindersAssigned: {
    '33lb': number;
    '40lb': number;
    '100lb': number;
  };
  cylindersSold: {
    '33lb': number;
    '40lb': number;
    '100lb': number;
  };
  cylindersRemaining: {
    '33lb': number;
    '40lb': number;
    '100lb': number;
  };
  totalSales: number; // Del d√≠a
  totalExpenses: number; // Del d√≠a
  dailyMargin: number; // Ventas - Gastos
  progressPercentage: number; // Visual
  lastUpdate: timestamp;
  status: 'active' | 'inactive' | 'completed';
}
```

#### **CU-J004: Registrar Llegada de Cami√≥n**

```typescript
// ‚úÖ DO: Estructura completa de llegada
interface TruckArrival {
  cylindersReceived: {
    '33lb': number;
    '40lb': number;
    '100lb': number;
  };
  cylindersDelivered: {
    brand: string;
    color: string;
    type: string;
    quantity: number;
  }[];
  unitCost: decimal; // CR√çTICO: Define rentabilidad
  totalInvoice: decimal;
  freightCost: decimal; // Se paga por separado
  timestamp: Date;
}
```

#### **CU-J008: Autorizar Ediciones de Vendedores**

```typescript
// ‚úÖ DO: Flujo de autorizaci√≥n completo
const authorizationFlow = {
  notification: 'solicitud_pendiente',
  review: 'datos_originales_vs_propuestos',
  decision: 'aprobar_rechazar_con_comentarios',
  execution: 'actualizacion_automatica_si_aprobado',
  audit: 'registro_completo_de_decision',
};
```

#### **CU-J009: Acceso Multi-dispositivo**

```typescript
// ‚úÖ DO: Interfaces espec√≠ficas por dispositivo
interface DeviceOptimization {
  desktop: {
    layout: 'sidebar + main content';
    features: 'full dashboard, detailed tables, advanced reports';
    navigation: 'sidebar menu';
  };
  tablet: {
    layout: 'top navigation + cards';
    features: 'optimized cards, touch navigation, essential reports';
    navigation: 'top tabs + bottom navigation';
  };
  mobile: {
    layout: 'compact tabs + bottom navigation';
    features: 'essential functions, quick actions, simplified reports';
    navigation: 'bottom tabs + hamburger menu';
  };
}
```

### **üë®‚Äçüíª Casos de Uso del Vendedor (ALTA PRIORIDAD)**

#### **CU-V001: Registrar Venta**

```typescript
// ‚úÖ DO: Estructura completa de venta
interface SaleForm {
  customerName: string; // Obligatorio
  customerPhone?: string; // Opcional
  customerLocation: string; // Obligatorio
  productType: '33lb' | '40lb' | '100lb';
  saleType: 'intercambio' | 'completa' | 'venta_vacios' | 'compra_vacios';
  emptyBrand?: string; // Para intercambios
  emptyColor?: string; // Para intercambios
  amountCharged: decimal;
  paymentMethod: 'efectivo' | 'transferencia' | 'credito';
  timestamp: Date; // Autom√°tico
}
```

#### **CU-V002: Registrar Gasto**

```typescript
// ‚úÖ DO: Categorizaci√≥n clara de gastos
type ExpenseType =
  | 'gasolina'
  | 'comida'
  | 'reparaciones'
  | 'imprevistos'
  | 'otros';

interface ExpenseForm {
  type: ExpenseType;
  amount: decimal;
  description: string;
  timestamp: Date;
  vendorId: string;
}
```

### **üö® Validaciones Cr√≠ticas del Sistema**

#### **Inventario**

```typescript
// ‚úÖ DO: Validaciones exhaustivas
const validateInventory = {
  neverNegative: 'quantity >= 0',
  checkAvailability: 'beforeSale',
  maintainConsistency: 'betweenStates',
  auditChanges: 'allModifications',
};
```

#### **Transacciones**

```typescript
// ‚úÖ DO: Validaciones de transacciones
const validateTransaction = {
  inventory: 'checkAvailability',
  customer: 'validateRequiredFields',
  amounts: 'validatePositiveNumbers',
  types: 'validateSaleType',
  permissions: 'checkUserRole',
};
```

### **üìä Orden de Implementaci√≥n Cr√≠tico**

#### **üî• Fase 1: Base Cr√≠tica (Semanas 1-2)**

1. CU-S001: Actualizar Inventario
2. CU-S002: Calcular Rentabilidad
3. CU-S006: Gestionar Estados de Cilindros
4. CU-J001: Gestionar Inventario

#### **‚ö° Fase 2: Operaci√≥n Diaria (Semanas 3-4)**

1. CU-J002: Asignar Cilindros Diarios
2. CU-V001: Registrar Venta
3. CU-V002: Registrar Gasto
4. CU-J003: Monitorear Panel "En Ruta"

#### **üìä Fase 3: Control y An√°lisis (Semanas 5-6)**

1. CU-J004: Registrar Llegada de Cami√≥n
2. CU-J005: Generar Reportes Financieros
3. CU-S003: Resetear Datos Diarios

#### **üéØ Fase 4: Funciones Avanzadas (Semanas 7-8)**

1. CU-J006: Configurar y Seguir Metas
2. CU-J007: Gestionar Precios Personalizados
3. CU-J008: Autorizar Ediciones de Vendedores
4. CU-J009: Acceso Multi-dispositivo
5. CU-V003: Solicitar Edici√≥n

#### **üîß Fase 5: Optimizaci√≥n (Semanas 9-10)**

1. CU-V005: Iniciar Sesi√≥n M√≥vil
2. CU-V006: Sincronizar Datos Offline
3. CU-S004: Generar Alertas
4. CU-S005: Validar Transacciones

### **üéØ M√©tricas de √âxito**

#### **Rendimiento**

- Carga inicial: ‚â§ 3 segundos
- Registro de ventas: ‚â§ 2 segundos
- Actualizaci√≥n de dashboard: ‚â§ 1 segundo

#### **Disponibilidad**

- 99.5% uptime durante horario laboral
- Sincronizaci√≥n offline: 99%+ exitosa

#### **Usabilidad**

- 100% adopci√≥n de vendedores en 30 d√≠as
- 0 instancias de inventario negativo
- Tiempo de capacitaci√≥n: ‚â§ 2 horas
